// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/trace.proto

package trace

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Success struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Success) Reset()         { *m = Success{} }
func (m *Success) String() string { return proto.CompactTextString(m) }
func (*Success) ProtoMessage()    {}
func (*Success) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ae0537c99d5460e, []int{0}
}

func (m *Success) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Success.Unmarshal(m, b)
}
func (m *Success) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Success.Marshal(b, m, deterministic)
}
func (m *Success) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Success.Merge(m, src)
}
func (m *Success) XXX_Size() int {
	return xxx_messageInfo_Success.Size(m)
}
func (m *Success) XXX_DiscardUnknown() {
	xxx_messageInfo_Success.DiscardUnknown(m)
}

var xxx_messageInfo_Success proto.InternalMessageInfo

type TraceMessage struct {
	Trace                []string `protobuf:"bytes,1,rep,name=trace,proto3" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TraceMessage) Reset()         { *m = TraceMessage{} }
func (m *TraceMessage) String() string { return proto.CompactTextString(m) }
func (*TraceMessage) ProtoMessage()    {}
func (*TraceMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ae0537c99d5460e, []int{1}
}

func (m *TraceMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TraceMessage.Unmarshal(m, b)
}
func (m *TraceMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TraceMessage.Marshal(b, m, deterministic)
}
func (m *TraceMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceMessage.Merge(m, src)
}
func (m *TraceMessage) XXX_Size() int {
	return xxx_messageInfo_TraceMessage.Size(m)
}
func (m *TraceMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TraceMessage proto.InternalMessageInfo

func (m *TraceMessage) GetTrace() []string {
	if m != nil {
		return m.Trace
	}
	return nil
}

type TraceQuery struct {
	TraceID              string   `protobuf:"bytes,1,opt,name=traceID,proto3" json:"traceID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TraceQuery) Reset()         { *m = TraceQuery{} }
func (m *TraceQuery) String() string { return proto.CompactTextString(m) }
func (*TraceQuery) ProtoMessage()    {}
func (*TraceQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ae0537c99d5460e, []int{2}
}

func (m *TraceQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TraceQuery.Unmarshal(m, b)
}
func (m *TraceQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TraceQuery.Marshal(b, m, deterministic)
}
func (m *TraceQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceQuery.Merge(m, src)
}
func (m *TraceQuery) XXX_Size() int {
	return xxx_messageInfo_TraceQuery.Size(m)
}
func (m *TraceQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceQuery.DiscardUnknown(m)
}

var xxx_messageInfo_TraceQuery proto.InternalMessageInfo

func (m *TraceQuery) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

type AppendTraceRequest struct {
	TraceID              string   `protobuf:"bytes,1,opt,name=traceID,proto3" json:"traceID,omitempty"`
	Addr                 string   `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendTraceRequest) Reset()         { *m = AppendTraceRequest{} }
func (m *AppendTraceRequest) String() string { return proto.CompactTextString(m) }
func (*AppendTraceRequest) ProtoMessage()    {}
func (*AppendTraceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ae0537c99d5460e, []int{3}
}

func (m *AppendTraceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendTraceRequest.Unmarshal(m, b)
}
func (m *AppendTraceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendTraceRequest.Marshal(b, m, deterministic)
}
func (m *AppendTraceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendTraceRequest.Merge(m, src)
}
func (m *AppendTraceRequest) XXX_Size() int {
	return xxx_messageInfo_AppendTraceRequest.Size(m)
}
func (m *AppendTraceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendTraceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppendTraceRequest proto.InternalMessageInfo

func (m *AppendTraceRequest) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

func (m *AppendTraceRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func init() {
	proto.RegisterType((*Success)(nil), "trace.Success")
	proto.RegisterType((*TraceMessage)(nil), "trace.TraceMessage")
	proto.RegisterType((*TraceQuery)(nil), "trace.TraceQuery")
	proto.RegisterType((*AppendTraceRequest)(nil), "trace.AppendTraceRequest")
}

func init() { proto.RegisterFile("proto/trace.proto", fileDescriptor_9ae0537c99d5460e) }

var fileDescriptor_9ae0537c99d5460e = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x29, 0x4a, 0x4c, 0x4e, 0xd5, 0x03, 0xb3, 0x85, 0x58, 0xc1, 0x1c, 0x25, 0x4e,
	0x2e, 0xf6, 0xe0, 0xd2, 0xe4, 0xe4, 0xd4, 0xe2, 0x62, 0x25, 0x15, 0x2e, 0x9e, 0x10, 0x90, 0x98,
	0x6f, 0x6a, 0x71, 0x71, 0x62, 0x7a, 0xaa, 0x90, 0x08, 0x17, 0x44, 0x8d, 0x04, 0xa3, 0x02, 0xb3,
	0x06, 0x67, 0x10, 0x54, 0x83, 0x1a, 0x17, 0x17, 0x58, 0x55, 0x60, 0x69, 0x6a, 0x51, 0xa5, 0x90,
	0x04, 0x17, 0x3b, 0x58, 0xd8, 0xd3, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc6, 0x55,
	0x72, 0xe2, 0x12, 0x72, 0x2c, 0x28, 0x48, 0xcd, 0x4b, 0x01, 0xab, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d,
	0x2d, 0x2e, 0xc1, 0xad, 0x5e, 0x48, 0x88, 0x8b, 0x25, 0x31, 0x25, 0xa5, 0x48, 0x82, 0x09, 0x2c,
	0x0c, 0x66, 0x1b, 0x6d, 0x61, 0xe4, 0x62, 0x05, 0x6b, 0x17, 0xb2, 0xe4, 0xe2, 0x0a, 0x2e, 0x49,
	0x2c, 0x2a, 0x81, 0xf0, 0x24, 0xf5, 0x20, 0x3e, 0xc1, 0xb4, 0x40, 0x8a, 0x0f, 0x2a, 0x05, 0xf3,
	0x14, 0x83, 0x90, 0x09, 0x17, 0x87, 0x7b, 0x2a, 0x54, 0xa3, 0x20, 0x54, 0x16, 0xe1, 0x03, 0x29,
	0x61, 0x64, 0x21, 0xa8, 0xd7, 0x95, 0x18, 0x84, 0xac, 0xb8, 0xb8, 0x91, 0x4c, 0x27, 0xc9, 0xc6,
	0x24, 0x36, 0x70, 0x08, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xda, 0xf8, 0x62, 0x76,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TraceClient is the client API for Trace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TraceClient interface {
	StartTrace(ctx context.Context, in *AppendTraceRequest, opts ...grpc.CallOption) (*Success, error)
	GetTrace(ctx context.Context, in *TraceQuery, opts ...grpc.CallOption) (*TraceMessage, error)
	AppendTrace(ctx context.Context, in *AppendTraceRequest, opts ...grpc.CallOption) (*Success, error)
}

type traceClient struct {
	cc *grpc.ClientConn
}

func NewTraceClient(cc *grpc.ClientConn) TraceClient {
	return &traceClient{cc}
}

func (c *traceClient) StartTrace(ctx context.Context, in *AppendTraceRequest, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/trace.Trace/StartTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traceClient) GetTrace(ctx context.Context, in *TraceQuery, opts ...grpc.CallOption) (*TraceMessage, error) {
	out := new(TraceMessage)
	err := c.cc.Invoke(ctx, "/trace.Trace/GetTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traceClient) AppendTrace(ctx context.Context, in *AppendTraceRequest, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/trace.Trace/AppendTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TraceServer is the server API for Trace service.
type TraceServer interface {
	StartTrace(context.Context, *AppendTraceRequest) (*Success, error)
	GetTrace(context.Context, *TraceQuery) (*TraceMessage, error)
	AppendTrace(context.Context, *AppendTraceRequest) (*Success, error)
}

// UnimplementedTraceServer can be embedded to have forward compatible implementations.
type UnimplementedTraceServer struct {
}

func (*UnimplementedTraceServer) StartTrace(ctx context.Context, req *AppendTraceRequest) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTrace not implemented")
}
func (*UnimplementedTraceServer) GetTrace(ctx context.Context, req *TraceQuery) (*TraceMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrace not implemented")
}
func (*UnimplementedTraceServer) AppendTrace(ctx context.Context, req *AppendTraceRequest) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendTrace not implemented")
}

func RegisterTraceServer(s *grpc.Server, srv TraceServer) {
	s.RegisterService(&_Trace_serviceDesc, srv)
}

func _Trace_StartTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceServer).StartTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trace.Trace/StartTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceServer).StartTrace(ctx, req.(*AppendTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trace_GetTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraceQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceServer).GetTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trace.Trace/GetTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceServer).GetTrace(ctx, req.(*TraceQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trace_AppendTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceServer).AppendTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trace.Trace/AppendTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceServer).AppendTrace(ctx, req.(*AppendTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Trace_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trace.Trace",
	HandlerType: (*TraceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartTrace",
			Handler:    _Trace_StartTrace_Handler,
		},
		{
			MethodName: "GetTrace",
			Handler:    _Trace_GetTrace_Handler,
		},
		{
			MethodName: "AppendTrace",
			Handler:    _Trace_AppendTrace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/trace.proto",
}
