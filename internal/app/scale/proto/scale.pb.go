// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/scale.proto

package scale

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RemoteId struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoteId) Reset()         { *m = RemoteId{} }
func (m *RemoteId) String() string { return proto.CompactTextString(m) }
func (*RemoteId) ProtoMessage()    {}
func (*RemoteId) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea80762c827c7836, []int{0}
}

func (m *RemoteId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteId.Unmarshal(m, b)
}
func (m *RemoteId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteId.Marshal(b, m, deterministic)
}
func (m *RemoteId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteId.Merge(m, src)
}
func (m *RemoteId) XXX_Size() int {
	return xxx_messageInfo_RemoteId.Size(m)
}
func (m *RemoteId) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteId.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteId proto.InternalMessageInfo

type UpdateReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateReq) Reset()         { *m = UpdateReq{} }
func (m *UpdateReq) String() string { return proto.CompactTextString(m) }
func (*UpdateReq) ProtoMessage()    {}
func (*UpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea80762c827c7836, []int{1}
}

func (m *UpdateReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateReq.Unmarshal(m, b)
}
func (m *UpdateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateReq.Marshal(b, m, deterministic)
}
func (m *UpdateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReq.Merge(m, src)
}
func (m *UpdateReq) XXX_Size() int {
	return xxx_messageInfo_UpdateReq.Size(m)
}
func (m *UpdateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReq proto.InternalMessageInfo

type RemoteQuery struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoteQuery) Reset()         { *m = RemoteQuery{} }
func (m *RemoteQuery) String() string { return proto.CompactTextString(m) }
func (*RemoteQuery) ProtoMessage()    {}
func (*RemoteQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea80762c827c7836, []int{2}
}

func (m *RemoteQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteQuery.Unmarshal(m, b)
}
func (m *RemoteQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteQuery.Marshal(b, m, deterministic)
}
func (m *RemoteQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteQuery.Merge(m, src)
}
func (m *RemoteQuery) XXX_Size() int {
	return xxx_messageInfo_RemoteQuery.Size(m)
}
func (m *RemoteQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteQuery.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteQuery proto.InternalMessageInfo

type RemoteNode struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoteNode) Reset()         { *m = RemoteNode{} }
func (m *RemoteNode) String() string { return proto.CompactTextString(m) }
func (*RemoteNode) ProtoMessage()    {}
func (*RemoteNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea80762c827c7836, []int{3}
}

func (m *RemoteNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteNode.Unmarshal(m, b)
}
func (m *RemoteNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteNode.Marshal(b, m, deterministic)
}
func (m *RemoteNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteNode.Merge(m, src)
}
func (m *RemoteNode) XXX_Size() int {
	return xxx_messageInfo_RemoteNode.Size(m)
}
func (m *RemoteNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteNode.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteNode proto.InternalMessageInfo

type RpcOkay struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcOkay) Reset()         { *m = RpcOkay{} }
func (m *RpcOkay) String() string { return proto.CompactTextString(m) }
func (*RpcOkay) ProtoMessage()    {}
func (*RpcOkay) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea80762c827c7836, []int{4}
}

func (m *RpcOkay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcOkay.Unmarshal(m, b)
}
func (m *RpcOkay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcOkay.Marshal(b, m, deterministic)
}
func (m *RpcOkay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcOkay.Merge(m, src)
}
func (m *RpcOkay) XXX_Size() int {
	return xxx_messageInfo_RpcOkay.Size(m)
}
func (m *RpcOkay) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcOkay.DiscardUnknown(m)
}

var xxx_messageInfo_RpcOkay proto.InternalMessageInfo

type IdReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdReply) Reset()         { *m = IdReply{} }
func (m *IdReply) String() string { return proto.CompactTextString(m) }
func (*IdReply) ProtoMessage()    {}
func (*IdReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea80762c827c7836, []int{5}
}

func (m *IdReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdReply.Unmarshal(m, b)
}
func (m *IdReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdReply.Marshal(b, m, deterministic)
}
func (m *IdReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdReply.Merge(m, src)
}
func (m *IdReply) XXX_Size() int {
	return xxx_messageInfo_IdReply.Size(m)
}
func (m *IdReply) XXX_DiscardUnknown() {
	xxx_messageInfo_IdReply.DiscardUnknown(m)
}

var xxx_messageInfo_IdReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RemoteId)(nil), "scale.RemoteId")
	proto.RegisterType((*UpdateReq)(nil), "scale.UpdateReq")
	proto.RegisterType((*RemoteQuery)(nil), "scale.RemoteQuery")
	proto.RegisterType((*RemoteNode)(nil), "scale.RemoteNode")
	proto.RegisterType((*RpcOkay)(nil), "scale.RpcOkay")
	proto.RegisterType((*IdReply)(nil), "scale.IdReply")
}

func init() { proto.RegisterFile("proto/scale.proto", fileDescriptor_ea80762c827c7836) }

var fileDescriptor_ea80762c827c7836 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x2b, 0xa4, 0x16, 0x7a, 0xa5, 0xa1, 0xbd, 0x81, 0x81, 0xd1, 0x3b, 0x45, 0xa2, 0xc0,
	0xc8, 0x82, 0x54, 0x94, 0xa5, 0x40, 0x22, 0x1e, 0x20, 0xf8, 0x3e, 0xaa, 0x88, 0x10, 0x87, 0xd8,
	0x1d, 0xf2, 0x96, 0x3c, 0x52, 0x95, 0x3f, 0xb5, 0x14, 0xa9, 0x43, 0xb6, 0xbb, 0xe4, 0x7e, 0xfe,
	0x7d, 0x67, 0xd3, 0xb2, 0x28, 0x8d, 0x33, 0x77, 0x56, 0x27, 0x19, 0x56, 0x4d, 0xcd, 0xe3, 0xa6,
	0x51, 0x44, 0x17, 0x11, 0x7e, 0x8d, 0x43, 0x28, 0x6a, 0x46, 0xd3, 0xcf, 0x42, 0x12, 0x87, 0x08,
	0x7f, 0x6a, 0x4e, 0xb3, 0xf6, 0xc7, 0xc7, 0x1e, 0x65, 0xa5, 0x2e, 0x89, 0xda, 0x76, 0x6b, 0x04,
	0x6a, 0x4a, 0xe7, 0x51, 0xa1, 0xdf, 0x7e, 0x92, 0xaa, 0x2e, 0x43, 0x89, 0x50, 0x64, 0xd5, 0xfd,
	0xff, 0x19, 0x8d, 0xe3, 0xfa, 0x54, 0x5e, 0x53, 0xf0, 0x0a, 0x17, 0xef, 0xb5, 0x86, 0xb5, 0xa6,
	0x0c, 0x85, 0xaf, 0x56, 0xad, 0xfc, 0x28, 0xbb, 0x09, 0xba, 0x0f, 0x1d, 0xac, 0x46, 0xfc, 0x44,
	0x8b, 0x18, 0xee, 0xbd, 0x84, 0xc0, 0x63, 0x8b, 0x6e, 0xca, 0xe7, 0xf2, 0xdc, 0xd1, 0x3f, 0xe2,
	0x07, 0x0a, 0xe2, 0xbe, 0x6c, 0x08, 0xf5, 0x48, 0xf3, 0x4d, 0x9a, 0x8b, 0xc7, 0x98, 0x7b, 0x09,
	0x9b, 0xad, 0x4f, 0x84, 0xbc, 0xa5, 0xc9, 0xd6, 0xb8, 0xf4, 0xbb, 0xe2, 0x65, 0x6f, 0xbe, 0xbe,
	0x96, 0x13, 0x96, 0x67, 0xba, 0x7e, 0xc9, 0x8c, 0x85, 0xad, 0xf7, 0xd2, 0x90, 0x34, 0xdf, 0x6d,
	0xd2, 0x7c, 0x87, 0x81, 0xba, 0xaf, 0x49, 0xf3, 0x58, 0xeb, 0x43, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xca, 0xbf, 0x3e, 0x5f, 0xc1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScaleClient is the client API for Scale service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScaleClient interface {
	GetSuccessorId(ctx context.Context, in *RemoteId, opts ...grpc.CallOption) (*IdReply, error)
	SetPredecessorId(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*RpcOkay, error)
	SetSuccessorId(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*RpcOkay, error)
	FindSuccessor(ctx context.Context, in *RemoteQuery, opts ...grpc.CallOption) (*IdReply, error)
	Notify(ctx context.Context, in *RemoteNode, opts ...grpc.CallOption) (*RpcOkay, error)
	ClosestPrecedingFinger(ctx context.Context, in *RemoteQuery, opts ...grpc.CallOption) (*IdReply, error)
}

type scaleClient struct {
	cc *grpc.ClientConn
}

func NewScaleClient(cc *grpc.ClientConn) ScaleClient {
	return &scaleClient{cc}
}

func (c *scaleClient) GetSuccessorId(ctx context.Context, in *RemoteId, opts ...grpc.CallOption) (*IdReply, error) {
	out := new(IdReply)
	err := c.cc.Invoke(ctx, "/scale.Scale/GetSuccessorId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scaleClient) SetPredecessorId(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*RpcOkay, error) {
	out := new(RpcOkay)
	err := c.cc.Invoke(ctx, "/scale.Scale/SetPredecessorId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scaleClient) SetSuccessorId(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*RpcOkay, error) {
	out := new(RpcOkay)
	err := c.cc.Invoke(ctx, "/scale.Scale/SetSuccessorId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scaleClient) FindSuccessor(ctx context.Context, in *RemoteQuery, opts ...grpc.CallOption) (*IdReply, error) {
	out := new(IdReply)
	err := c.cc.Invoke(ctx, "/scale.Scale/FindSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scaleClient) Notify(ctx context.Context, in *RemoteNode, opts ...grpc.CallOption) (*RpcOkay, error) {
	out := new(RpcOkay)
	err := c.cc.Invoke(ctx, "/scale.Scale/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scaleClient) ClosestPrecedingFinger(ctx context.Context, in *RemoteQuery, opts ...grpc.CallOption) (*IdReply, error) {
	out := new(IdReply)
	err := c.cc.Invoke(ctx, "/scale.Scale/ClosestPrecedingFinger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScaleServer is the server API for Scale service.
type ScaleServer interface {
	GetSuccessorId(context.Context, *RemoteId) (*IdReply, error)
	SetPredecessorId(context.Context, *UpdateReq) (*RpcOkay, error)
	SetSuccessorId(context.Context, *UpdateReq) (*RpcOkay, error)
	FindSuccessor(context.Context, *RemoteQuery) (*IdReply, error)
	Notify(context.Context, *RemoteNode) (*RpcOkay, error)
	ClosestPrecedingFinger(context.Context, *RemoteQuery) (*IdReply, error)
}

// UnimplementedScaleServer can be embedded to have forward compatible implementations.
type UnimplementedScaleServer struct {
}

func (*UnimplementedScaleServer) GetSuccessorId(ctx context.Context, req *RemoteId) (*IdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuccessorId not implemented")
}
func (*UnimplementedScaleServer) SetPredecessorId(ctx context.Context, req *UpdateReq) (*RpcOkay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPredecessorId not implemented")
}
func (*UnimplementedScaleServer) SetSuccessorId(ctx context.Context, req *UpdateReq) (*RpcOkay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSuccessorId not implemented")
}
func (*UnimplementedScaleServer) FindSuccessor(ctx context.Context, req *RemoteQuery) (*IdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessor not implemented")
}
func (*UnimplementedScaleServer) Notify(ctx context.Context, req *RemoteNode) (*RpcOkay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (*UnimplementedScaleServer) ClosestPrecedingFinger(ctx context.Context, req *RemoteQuery) (*IdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosestPrecedingFinger not implemented")
}

func RegisterScaleServer(s *grpc.Server, srv ScaleServer) {
	s.RegisterService(&_Scale_serviceDesc, srv)
}

func _Scale_GetSuccessorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScaleServer).GetSuccessorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scale.Scale/GetSuccessorId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScaleServer).GetSuccessorId(ctx, req.(*RemoteId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scale_SetPredecessorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScaleServer).SetPredecessorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scale.Scale/SetPredecessorId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScaleServer).SetPredecessorId(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scale_SetSuccessorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScaleServer).SetSuccessorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scale.Scale/SetSuccessorId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScaleServer).SetSuccessorId(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scale_FindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScaleServer).FindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scale.Scale/FindSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScaleServer).FindSuccessor(ctx, req.(*RemoteQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scale_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScaleServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scale.Scale/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScaleServer).Notify(ctx, req.(*RemoteNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scale_ClosestPrecedingFinger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScaleServer).ClosestPrecedingFinger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scale.Scale/ClosestPrecedingFinger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScaleServer).ClosestPrecedingFinger(ctx, req.(*RemoteQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scale_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scale.Scale",
	HandlerType: (*ScaleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSuccessorId",
			Handler:    _Scale_GetSuccessorId_Handler,
		},
		{
			MethodName: "SetPredecessorId",
			Handler:    _Scale_SetPredecessorId_Handler,
		},
		{
			MethodName: "SetSuccessorId",
			Handler:    _Scale_SetSuccessorId_Handler,
		},
		{
			MethodName: "FindSuccessor",
			Handler:    _Scale_FindSuccessor_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Scale_Notify_Handler,
		},
		{
			MethodName: "ClosestPrecedingFinger",
			Handler:    _Scale_ClosestPrecedingFinger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/scale.proto",
}
